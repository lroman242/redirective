// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/presenter/trace_presenter.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	domain "github.com/lroman242/redirective/domain"
	reflect "reflect"
)

// MockTracePresenter is a mock of TracePresenter interface
type MockTracePresenter struct {
	ctrl     *gomock.Controller
	recorder *MockTracePresenterMockRecorder
}

// MockTracePresenterMockRecorder is the mock recorder for MockTracePresenter
type MockTracePresenterMockRecorder struct {
	mock *MockTracePresenter
}

// NewMockTracePresenter creates a new mock instance
func NewMockTracePresenter(ctrl *gomock.Controller) *MockTracePresenter {
	mock := &MockTracePresenter{ctrl: ctrl}
	mock.recorder = &MockTracePresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTracePresenter) EXPECT() *MockTracePresenterMockRecorder {
	return m.recorder
}

// ResponseTraceResults mocks base method
func (m *MockTracePresenter) ResponseTraceResults(arg0 *domain.TraceResults) *domain.TraceResults {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResponseTraceResults", arg0)
	ret0, _ := ret[0].(*domain.TraceResults)
	return ret0
}

// ResponseTraceResults indicates an expected call of ResponseTraceResults
func (mr *MockTracePresenterMockRecorder) ResponseTraceResults(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResponseTraceResults", reflect.TypeOf((*MockTracePresenter)(nil).ResponseTraceResults), arg0)
}

// ResponseScreenshot mocks base method
func (m *MockTracePresenter) ResponseScreenshot(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResponseScreenshot", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// ResponseScreenshot indicates an expected call of ResponseScreenshot
func (mr *MockTracePresenterMockRecorder) ResponseScreenshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResponseScreenshot", reflect.TypeOf((*MockTracePresenter)(nil).ResponseScreenshot), arg0)
}
