// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/interactor/trace_interactor.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	domain "github.com/lroman242/redirective/domain"
	url "net/url"
	reflect "reflect"
)

// MockTraceInteractor is a mock of TraceInteractor interface
type MockTraceInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockTraceInteractorMockRecorder
}

// MockTraceInteractorMockRecorder is the mock recorder for MockTraceInteractor
type MockTraceInteractorMockRecorder struct {
	mock *MockTraceInteractor
}

// NewMockTraceInteractor creates a new mock instance
func NewMockTraceInteractor(ctrl *gomock.Controller) *MockTraceInteractor {
	mock := &MockTraceInteractor{ctrl: ctrl}
	mock.recorder = &MockTraceInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTraceInteractor) EXPECT() *MockTraceInteractorMockRecorder {
	return m.recorder
}

// Trace mocks base method
func (m *MockTraceInteractor) Trace(arg0 *url.URL, arg1 string) (*domain.TraceResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trace", arg0, arg1)
	ret0, _ := ret[0].(*domain.TraceResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Trace indicates an expected call of Trace
func (mr *MockTraceInteractorMockRecorder) Trace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trace", reflect.TypeOf((*MockTraceInteractor)(nil).Trace), arg0, arg1)
}

// Screenshot mocks base method
func (m *MockTraceInteractor) Screenshot(arg0 *url.URL, arg1, arg2 int, arg3 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Screenshot", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Screenshot indicates an expected call of Screenshot
func (mr *MockTraceInteractorMockRecorder) Screenshot(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Screenshot", reflect.TypeOf((*MockTraceInteractor)(nil).Screenshot), arg0, arg1, arg2, arg3)
}

// FindTrace mocks base method
func (m *MockTraceInteractor) FindTrace(arg0 interface{}) (*domain.TraceResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTrace", arg0)
	ret0, _ := ret[0].(*domain.TraceResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTrace indicates an expected call of FindTrace
func (mr *MockTraceInteractorMockRecorder) FindTrace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTrace", reflect.TypeOf((*MockTraceInteractor)(nil).FindTrace), arg0)
}
