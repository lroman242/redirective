// Code generated by MockGen. DO NOT EDIT.
// Source: infrastructure/tracer/tracer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	domain "github.com/lroman242/redirective/domain"
	tracer "github.com/lroman242/redirective/infrastructure/tracer"
	url "net/url"
	reflect "reflect"
)

// MockTracer is a mock of Tracer interface
type MockTracer struct {
	ctrl     *gomock.Controller
	recorder *MockTracerMockRecorder
}

// MockTracerMockRecorder is the mock recorder for MockTracer
type MockTracerMockRecorder struct {
	mock *MockTracer
}

// NewMockTracer creates a new mock instance
func NewMockTracer(ctrl *gomock.Controller) *MockTracer {
	mock := &MockTracer{ctrl: ctrl}
	mock.recorder = &MockTracerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTracer) EXPECT() *MockTracerMockRecorder {
	return m.recorder
}

// Trace mocks base method
func (m *MockTracer) Trace(url *url.URL, path string) (*domain.TraceResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trace", url, path)
	ret0, _ := ret[0].(*domain.TraceResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Trace indicates an expected call of Trace
func (mr *MockTracerMockRecorder) Trace(url, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trace", reflect.TypeOf((*MockTracer)(nil).Trace), url, path)
}

// Screenshot mocks base method
func (m *MockTracer) Screenshot(url *url.URL, size *tracer.ScreenSize, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Screenshot", url, size, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// Screenshot indicates an expected call of Screenshot
func (mr *MockTracerMockRecorder) Screenshot(url, size, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Screenshot", reflect.TypeOf((*MockTracer)(nil).Screenshot), url, size, path)
}
