// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/repository/trace_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	domain "github.com/lroman242/redirective/domain"
	reflect "reflect"
)

// MockTraceRepository is a mock of TraceRepository interface
type MockTraceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTraceRepositoryMockRecorder
}

// MockTraceRepositoryMockRecorder is the mock recorder for MockTraceRepository
type MockTraceRepositoryMockRecorder struct {
	mock *MockTraceRepository
}

// NewMockTraceRepository creates a new mock instance
func NewMockTraceRepository(ctrl *gomock.Controller) *MockTraceRepository {
	mock := &MockTraceRepository{ctrl: ctrl}
	mock.recorder = &MockTraceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTraceRepository) EXPECT() *MockTraceRepositoryMockRecorder {
	return m.recorder
}

// SaveTraceResults mocks base method
func (m *MockTraceRepository) SaveTraceResults(traceResults *domain.TraceResults) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTraceResults", traceResults)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveTraceResults indicates an expected call of SaveTraceResults
func (mr *MockTraceRepositoryMockRecorder) SaveTraceResults(traceResults interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTraceResults", reflect.TypeOf((*MockTraceRepository)(nil).SaveTraceResults), traceResults)
}

// FindTraceResults mocks base method
func (m *MockTraceRepository) FindTraceResults(arg0 interface{}) (*domain.TraceResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTraceResults", arg0)
	ret0, _ := ret[0].(*domain.TraceResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTraceResults indicates an expected call of FindTraceResults
func (mr *MockTraceRepositoryMockRecorder) FindTraceResults(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTraceResults", reflect.TypeOf((*MockTraceRepository)(nil).FindTraceResults), arg0)
}
